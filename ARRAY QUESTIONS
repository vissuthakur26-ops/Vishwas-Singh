  // PROBLEM NO 1.......... Sorting the array in descending order

//     import java.util.*;
//     public class vishwas {
//     public static void main(String[] args)
//     {
//         Integer a[] = { 3,7,2,9,4 };

        
//         Arrays.sort(a, Collections.reverseOrder());

//         System.out.println(Arrays.toString(a));
//     }
// }

//.........................................................................................................

//  PROBLEM NO 2......Function for finding first and last occurrence of eLEMENT

// import java.util.*;
//  public class vishwas {

    
//     static ArrayList<Integer> find(int[] arr, int x) {
//         int n = arr.length;
        
    
//         int first = -1, last = -1;
        
//         for (int i = 0; i < n; i++) {
            
            
//             if (x != arr[i])
//                 continue;
            
    
//             if (first == -1)
//                 first = i;
            
            
//             last = i;
//         }
//         ArrayList<Integer> res = new ArrayList<>();
//         res.add(first);
//         res.add(last);
//         return res;
//     }
    
//     public static void main(String[] args) {
//         int[] arr = {4,2,7,4,9,4};
//         int x = 4;
//         ArrayList<Integer> res = find(arr, x);
//         System.out.println(res.get(0) + " " + res.get(1));
//     }
// }

//........................................................................................................

//PROBLEM NO 3........... Count frequency Of each number

// import java.util.Arrays;
//  public class vishwas {

// public static void countFreq(int arr[], int n)
// {
// boolean visited[] = new boolean[n];
// Arrays.fill(visited, false);

// for (int i = 0; i < n; i++) {


// if (visited[i] == true)
// continue;


// int count = 1;
// for (int j = i + 1; j < n; j++) {
// if (arr[i] == arr[j]) {
// visited[j] = true;
// count++;
// }
// }
// System.out.println(arr[i] + " occurs " + count +" times ");
// }
// }

// public static void main(String []args)
// {
// int arr[] = new int[]{1,2,2,3,3,3};
// int n = arr.length;
// countFreq(arr, n);
// }
// }

//.........................................................................................................


//    // PROBLEM NO 4......REVERSE A ARRAY..........................


//  public class vishwas {


//     public static void main(String[] args) {



// int [] arr ={10,20,30,40,50};
// int l=arr.length;
// int n= Math.floorDiv(l,2);
// int temp;
// for (int i=0;i<n;i++){
//     // swapping............
//     temp=arr[i];
//     arr[i]=arr[l-i-1];
//     arr[l-i-1]=temp;

// }
// for (int element:arr){
//    System.out.print(element+"  ");

// }
//    }
// }


//.......................................................................................................

 //PROBLEM NO 5 ..........check if array is sorted


//  public class vishwas {

   

//     public static void main(String[] args) {
           


// boolean isSorted=true;
// int [] arr ={1,2,3,5,67,98};
// for(int i=0;i<arr.length-1;i++){
//     if(arr[i]>arr[i+1]){
//      isSorted=false;
//      break;
//     }
//     }
//     if(isSorted){

//     System.out.println("the array is sorted");
//     }
//     else{
//         System.out.println("the array is not sorted ");
//     }

//     }
//     }
    

//.......................................................................................................


// PROBLEM NO 6....copy only even number....
// public class vishwas {

//     public static void main(String[] args) {
//         int[] arr = {1,4,6,7,8};

//         int evenCount = 0;
//         for (int num : arr) {
//             if (num % 2 == 0) {
//                 evenCount++;
//             }
//         }


//         int[] arr2 = new int[evenCount];

//         int arrIndex = 0;
//         for (int num : arr) {
//             if (num % 2 == 0) {
//                 arr2[arrIndex] = num;
//                 arrIndex++;
//             }
//         }

//         System.out.println("Even numbers in the new array:");
//         for (int num : arr2) {
//             System.out.print(num + " ");
//         }
//     }
// }

//........................................................................................................

//PROBLEM NUMBER 7..SECOND LARGEST NUMBER

// public class vishwas {
//    public static void main(String args[]){
//       int temp, size;
//       int array[] = {10, 20,4,45,99};
//       size = array.length;

//       for(int i = 0; i<size; i++ ){
//          for(int j = i+1; j<size; j++){

//             if(array[i]>array[j]){
//                temp = array[i];
//                array[i] = array[j];
//                array[j] = temp;
//             }
//          }
//       }
//       System.out.println(" second largest number is:: "+array[size-2]);
//    }
// }

//.........................................................................................................

//PROBLEM NO 8 ..TO FIND DUPLICATE ELEMENT....

// public class vishwas {

//     public static void main(String[] args) {
//         int[] arr = {1,3,2,3,4,1};

//         System.out.println("Duplicate elements in the array are:");

//         for (int i = 0; i < arr.length; i++) {
            
//             for (int j = i + 1; j < arr.length; j++) {
            
//                 if (arr[i] == arr[j]) {
//                     System.out.println(arr[j]);
//                 }
//             }
//         }
//     }
// }

//......................................................................................................
//PROBLRM NO 9...MERGE TWO SORTED ARRAY..

// public class vishwas {

//     public static int[] mergeArrays(int[] arr1, int[] arr2) {
//         int n1 = arr1.length;
//         int n2 = arr2.length;
//         int[] mergedArray = new int[n1 + n2]; 

//         int i = 0; 
//         int j = 0; 
//         int k = 0; 

//         while (i < n1 && j < n2) {
//             if (arr1[i] <= arr2[j]) {
//                 mergedArray[k++] = arr1[i++];
//             } else {
//                 mergedArray[k++] = arr2[j++];
//             }
//         }

//         while (i < n1) {
//             mergedArray[k++] = arr1[i++];
//         }

//         while (j < n2) {
//             mergedArray[k++] = arr2[j++];
//         }

//         return mergedArray;
//     }

//     public static void main(String[] args) {
//         int[] arr1 = {1,3,5};
//         int[] arr2 = {2,4,6};

//         int[] result = mergeArrays(arr1, arr2);

//         System.out.print("Merged Sorted Array: ");
//         for (int num : result) {
//             System.out.print(num + " ");
//         }
//         System.out.println();
//     }
// }

//...................................................................................................

//PROBLEM N0 10....BINARY SEARCH WITHOUT USING BUILT IN METHOD

// public class vishwas {

//     public static int binarySearch(int[] arr, int target) {
//         int low = 0;
//         int high = arr.length - 1;

//         while (low <= high) {
//             int mid = low + (high - low) / 2; 

//             if (arr[mid] == target) {
//                 return mid; 
//             } else if (arr[mid] < target) {
//                 low = mid + 1; 
//             } else {
//                 high = mid - 1; 
//             }
//         }
//         return -1;
//     }

//     public static void main(String[] args) {
//         int[] sortedArray = {5, 12, 23, 38, 45, 60, 72, 81, 95};
//         int targetValue1 = 60;
//         int targetValue2 = 100;

//         int index1 = binarySearch(sortedArray, targetValue1);
//         if (index1 != -1) {
//             System.out.println("Value " + targetValue1 + " found at index: " + index1);
//         } else {
//             System.out.println("Value " + targetValue1 + " not found in the array.");
//         }

//         int index2 = binarySearch(sortedArray, targetValue2);
//         if (index2 != -1) {
//             System.out.println("Value " + targetValue2 + " found at index: " + index2);
//         } else {
//             System.out.println("Value " + targetValue2 + " not found in the array.");
//         }
//     }
// }
